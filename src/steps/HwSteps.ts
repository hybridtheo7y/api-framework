import { allure } from 'allure-mocha/runtime';
import CoreApi from '../http/CoreApi';
import { assert } from 'chai';
import { AxiosResponse } from 'axios';
import { Cat } from '../../@types/common';

export default class Steps {
  public static common = {
    stepGetAllByLetter: Steps.getAllByLetter,
    stepGetCatById: Steps.getCatById,
    stepRemoveCat: Steps.removeCat,
    equal: Steps.equal,
  };


  private static async getAllByLetter(): Promise<AxiosResponse<{ groups: { title: string; cats: Cat[] }[] }>> {
    return await allure.step(`–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /getAllByLetter c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º limit=2`, async () => {
      const msg = `–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ GET /getAllByLetter c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º limit=2 –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ç–æ–≤`
      console.info('—Ç–µ—Å—Ç 1 üöÄ:',  msg);
      const response = await CoreApi.getAllByLetter();
      const data = JSON.stringify(response.data, null, 2);
      allure.attachment('attachment', data, 'application/json');

      return response;
    });
  }

  private static async getCatById(id: number): Promise<AxiosResponse<{ cat: Cat }>> {
    return await allure.step(`–≤—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${id}`, async () => {
      const msg1 = `–ü–æ–ª—É—á–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–π id= ${id} `
      console.info('—Ç–µ—Å—Ç 2 üöÄ:',  msg1);
      const msg2 = `–í—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å GET /get-by-id –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–æ—Ç —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º id= ${id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`
      console.info('—Ç–µ—Å—Ç 2 üöÄ:',  msg2);
      const response = await CoreApi.getCatById(id);
      const data = JSON.stringify(response.data, null, 2);
      console.info('—Ç–µ—Å—Ç 2 üöÄ:', '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /get-by-id:\n', data);
      allure.attachment('attachment', data, 'application/json');
      const CatName = response.data.cat.name;
      console.info('—Ç–µ—Å—Ç 2 üöÄ:', '–ü–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É ID –Ω–∞–π–¥–µ–Ω –∫–æ—Ç: ', CatName);
      return response;
    });
  }

  private static async removeCat(id: number): Promise<AxiosResponse<Cat>> {
    return await allure.step(`–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å DELETE cats/{catID}/remove`, async () => {
      const response = await CoreApi.removeCat(id);
      const msg = `–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ DELETE cats/{catID}/remove —É–¥–∞–ª—è–µ–º –∫–æ—Ç–∞ c id = ${id}`
      console.info('—Ç–µ—Å—Ç 3 üöÄ:',  msg);
      const data = JSON.stringify(response.data, null, 2);
      allure.attachment('attachment', data, 'application/json');
      return response;
    });
  }

  private static async equal(exp: any, act: any) {
    return await allure.step('–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏–π', () => {
      allure.attachment('expected', exp, 'text/plain');
      allure.attachment('actual', act, 'text/plain');
      assert.equal(exp, act, '–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç');
    });
  }
}
