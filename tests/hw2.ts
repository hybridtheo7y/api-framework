import { assert } from 'chai';
import CoreApi from '../src/http/CoreApi';
import LikeApi from '../src/http/LikeApi';
import { allure } from 'allure-mocha/runtime';

const getRandom = (max: number) => Math.floor(Math.random() * max);
const add_of_likes: number = 3;
const add_of_dislikes: number = 2;

describe('–¢–µ—Å—Ç-—Å—å—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤', async () => {

  let rand_ID = null;
  let CatName = null;
  let Id_Array = [];
  let Num_of_likes = null;
  let Num_of_dislikes = null;

  before( () => {
    console.log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  });
  afterEach(() => {
    console.log('–ü—Ä–æ–≥–æ–Ω —Ç–µ—Å—Ç-–∫–µ–π—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!\n');
  });
  beforeEach('–í—ã–¥–µ—Ä–≥–∏–≤–∞–µ–º id —Å–ª—É—á. –∫–æ—Ç–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–º GET cats/allByLetter', async () => {
    const response = await CoreApi.getAllByLetter();
    for (let i = 0; i < response.data.groups.length; i++) {
      Id_Array.push(response.data.groups[i].cats[0].id)
    }
    const random_Number = getRandom(Id_Array.length);
    rand_ID = Id_Array[random_Number];
    const msg = `–ò–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–º GET cats/allByLetter –≤—ã—Ç–∞—â–∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π id = ${rand_ID}\n `;
    console.log(msg);

  });

  it('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–æ–≤', async () => {
    await allure.step(`–≤—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å GET cats/get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${rand_ID}`, async () => {
      const msg = `–í—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å GET /get-by-id –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–æ—Ç —Å id= ${rand_ID} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`
      console.info('—Ç–µ—Å—Ç 1 üöÄ:',  msg);
      const response = await CoreApi.getCatById(rand_ID);
      assert.ok(response.status === 200, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      const data = JSON.stringify(response.data, null, 2);
      allure.attachment('attachment', data, 'application/json');
      CatName = response.data.cat.name;
      console.info('—Ç–µ—Å—Ç 1 üöÄ:', '–ü–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É ID –Ω–∞–π–¥–µ–Ω –∫–æ—Ç: ', CatName);
    });

    await allure.step(`–°–æ—Ö—Ä–∞–Ω–∏–º –ª–∞–π–∫–∏ –∫–æ—Ç–∞`, async () => {
      const response = await CoreApi.getCatById(rand_ID);
      assert.ok(response.status === 200, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      Num_of_likes = response.data.cat.likes
      const msg = `–£ –∫–æ—Ç–∞ ${CatName}  - ${Num_of_likes} –ª–∞–π–∫–∞(–æ–≤)`
      console.info('—Ç–µ—Å—Ç 2 üöÄ:', msg);
      assert.equal(response.data.cat.likes,  Num_of_likes, `–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! `);
    });


    await allure.step(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –∫–æ—Ç—É: ${rand_ID}`,
      async () => {
        console.info('–¢–µ—Å—Ç 3 üöÄ', `–í—ã–ø–æ–ª–Ω—è–µ–º –≤ —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–æ—Å POST cats/{catId}/likes –∏ —Å—Ç–∞–≤–∏–º ${add_of_likes} –ª–∞–π–∫–∞(–æ–≤)`);
        for (let i = 0; i < add_of_likes - 1; i++) {
          await LikeApi.likes(rand_ID, { like: true, dislike: null});
        }
        const response2 = await LikeApi.likes(rand_ID, { like: true, dislike: null});
        allure.testAttachment('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–π–∫–æ–≤', JSON.stringify(response2.data, null, 2), 'application/json',);
        assert.ok(response2.status === 200, );
      });

    await allure.step(` –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ —É –∫–æ—Ç–∞: ${CatName}`,
      async () => {
        console.info('–¢–µ—Å—Ç 4 üöÄ', '–í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å /getCatById, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ª–∞–π–∫–æ–≤');
        const response = await CoreApi.getCatById(rand_ID);
        const msg = `–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –ª–∞–π–∫–æ–≤ —É –∫–æ—Ç–∞ ${CatName}  = ${response.data.cat.likes} –∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ ${add_of_likes + Num_of_likes}`
        console.info('–¢–µ—Å—Ç 4 üöÄ', msg);
        assert.ok(response.status === 200, );
        assert.equal(response.data.cat.likes,  add_of_likes + Num_of_likes, `–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!`);
      });
  });

  it('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∑–ª–∞–π–∫–æ–≤', async () => {
    await allure.step(`–≤—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å GET cats/get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${rand_ID}`, async () => {
      const msg = `–í—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å GET /get-by-id –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–æ—Ç —Å id= ${rand_ID} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`
      console.info('—Ç–µ—Å—Ç 1 üöÄ:',  msg);
      const response = await CoreApi.getCatById(rand_ID);
      assert.ok(response.status === 200, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      const data = JSON.stringify(response.data, null, 2);
      allure.attachment('attachment', data, 'application/json');
      CatName = response.data.cat.name;
      console.info('—Ç–µ—Å—Ç 1 üöÄ:', '–ü–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É ID –Ω–∞–π–¥–µ–Ω –∫–æ—Ç: ', CatName);
    });

    await allure.step(`–°–æ—Ö—Ä–∞–Ω–∏–º –¥–∏–∑–ª–∞–π–∫–∏ –∫–æ—Ç–∞`, async () => {
      const response = await CoreApi.getCatById(rand_ID);
      assert.ok(response.status === 200, '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      Num_of_dislikes = response.data.cat.dislikes
      const msg = `–£ –∫–æ—Ç–∞ ${CatName}  - ${Num_of_dislikes} –¥–∏–∑–ª–∞–π–∫–∞(–æ–≤)`
      console.info('—Ç–µ—Å—Ç 2 üöÄ:', msg);
      assert.equal(response.data.cat.dislikes,  Num_of_dislikes, `–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! `);
    });


    await allure.step(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∑–ª–∞–π–∫–æ–≤ –∫–æ—Ç—É: ${rand_ID}`,
      async () => {
        console.info('–¢–µ—Å—Ç 3 üöÄ', `–í—ã–ø–æ–ª–Ω—è–µ–º –≤ —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–æ—Å POST cats/{catId}/likes –∏ —Å—Ç–∞–≤–∏–º ${add_of_dislikes} –¥–∏–∑–ª–∞–π–∫–∞(–æ–≤)`);
        for (let i = 0; i < add_of_dislikes - 1; i++) {
          await LikeApi.likes(rand_ID, { like: null, dislike: true});
        }
        const response = await LikeApi.likes(rand_ID, { like: null, dislike: true});
        allure.testAttachment('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–∑–ª–∞–π–∫–æ–≤', JSON.stringify(response.data, null, 2), 'application/json',);
        assert.ok(response.status === 200, );
      });

    await allure.step(` –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∑–ª–∞–π–∫–æ–≤ —É –∫–æ—Ç–∞: ${CatName}`,
      async () => {
        console.info('–¢–µ—Å—Ç 4 üöÄ', '–í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å /getCatById, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤');
        const response = await CoreApi.getCatById(rand_ID);
        const msg = `–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ —É –∫–æ—Ç–∞ ${CatName}  = ${response.data.cat.dislikes} –∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ ${add_of_dislikes + Num_of_dislikes}`
        console.info('–¢–µ—Å—Ç 4 üöÄ', msg);
        assert.ok(response.status === 200, );
        assert.equal(response.data.cat.dislikes,  add_of_dislikes + Num_of_dislikes, `–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!`);
      });
  });

});